import java.time.LocalDateTime

ext {
    javaVersion = JavaVersion.VERSION_1_8
    pac4jVersion = "4.3.0"
    springBootVersion = "2.3.5.RELEASE"
    shiroVersion = "1.7.0"
}

allprojects {
    group = "com.baomidou"
    version = "1.0"

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }
}

description = "基于 pac4j-jwt 的 WEB 安全框架"

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.github.hierynomus.license'

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    dependencies {
        implementation(platform("org.pac4j:pac4j:${pac4jVersion}"))
        implementation(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
        annotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))

        testImplementation("org.assertj:assertj-core")
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.mockito:mockito-junit-jupiter")
        testImplementation("ch.qos.logback:logback-classic")
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.warnings = false
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    jar {
        into("META-INF/") {
            from rootProject.file("LICENSE")
        }
        into("META-INF/maven/$project.group/$project.name") {
            from { generatePomFileForMavenJavaPublication }
            rename ".*", "pom.xml"
        }
        afterEvaluate {
            manifest {
                attributes 'Implementation-Title': archiveBaseName
                attributes 'Implementation-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Bundle-DocURL': 'https://gitee.com/baomidou/shaun'
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': System.getProperty("user.name")
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': LocalDateTime.now().format("yyyy-MM-dd HH:mm:ss")
            }
        }
    }

    license {
        encoding = "UTF-8"
        header = rootProject.file("license.txt")
        include "**/*.java"
        exclude "**/test/**/*.java"
        exclude "**/*Test.java"
        mapping "java", "SLASHSTAR_STYLE"
//        ignoreFailures = true
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
    }

    //noinspection GroovyAssignabilityCheck
    task sourcesJar(type: Jar) {
        archiveClassifier = "sources"
        from sourceSets.main.allJava
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                encoding "UTF-8"
                charSet 'UTF-8'
                author true
                version true
                failOnError false
                links "http://docs.oracle.com/javase/8/docs/api"
            }
        }
    }

    task javadocJar(type: Jar) {
        archiveClassifier = "javadoc"
        from javadoc
    }

    test {
        useJUnitPlatform()
    }

    tasks.whenTaskAdded { task ->
        if (task.name.contains('signMavenJavaPublication')) {
            task.enabled = new File(project.property('signing.secretKeyRingFile') as String).isFile()
        }
    }
}