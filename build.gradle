import java.text.SimpleDateFormat

plugins {
    id 'java'
}

ext {
    pac4jVersion = "4.0.1"
    springBootVersion = "2.2.7.RELEASE"
    javaVersion = JavaVersion.VERSION_1_8
}

allprojects {
    group = "com.baomidou"
    version = "0.0.1.13-SNAPSHOT"

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }

    configurations {
        bom
        api.extendsFrom(bom)
        implementation.extendsFrom(bom)
        compileOnly.extendsFrom(bom)
        annotationProcessor.extendsFrom(bom)
        testCompileOnly.extendsFrom(bom)
        testAnnotationProcessor.extendsFrom(bom)
    }

    dependencies {
        bom(platform("org.pac4j:pac4j:${pac4jVersion}"))
        bom(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
    }
}

description = "easy security for web by pac4j"

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }

    jar {
        afterEvaluate {
            manifest {
                attributes 'Implementation-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Bundle-DocURL': 'https://mybatis.plus/'
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': System.getProperty("user.name")
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
            }
        }
    }

    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        compileOnly("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")
        testCompileOnly("org.projectlombok:lombok")

        testImplementation("org.assertj:assertj-core")
        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.mockito:mockito-junit-jupiter")
    }

    //noinspection GroovyAssignabilityCheck
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = "sources"
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                encoding "UTF-8"
                charSet 'UTF-8'
                author true
                version true
                failOnError false
                links "http://docs.oracle.com/javase/8/docs/api"
            }
        }
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = "javadoc"
    }

    test {
        useJUnitPlatform()
    }

    tasks.whenTaskAdded { task ->
        if (task.name.contains('signMavenJavaPublication')) {
            task.enabled = new File(project.property('signing.secretKeyRingFile') as String).isFile()
        }
    }

    publishing {
        repositories {
            maven {
                def userName = System.getProperty("un")
                def passWord = System.getProperty("ps")
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username userName
                    password passWord
                }
            }
        }
        publications {

            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'shaun'
                    packaging 'jar'
                    description = 'easy security for web by pac4j'
                    url = 'https://gitee.com/baomidou/shaun'

                    scm {
                        connection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        developerConnection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        url = 'https://gitee.com/baomidou/shaun'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'baomidou'
                            name = 'miemie'
                            email = 'wonderming@vip.qq.com'
                        }
                    }

                    withXml {
                        def root = asNode()
                        root.dependencies.'*'.findAll {
                            def d = it
                            d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }.each() {
                                d.scope*.value = 'compile'
                                d.appendNode('optional', true)
                            }
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }
}